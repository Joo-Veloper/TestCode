package io.cafekiosk.spring.api.mock;

import io.cafekiosk.spring.api.user.dto.UserStatus;
import io.cafekiosk.spring.api.user.service.port.UserRepository;
import io.cafekiosk.spring.domain.user.entity.User;
import io.cafekiosk.spring.global.exception.ResourceNotFoundException;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {

    // AtomicLong 카운트 관리
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<User> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public User getById(long id) {
        return findById(id).orElseThrow(() -> new ResourceNotFoundException("Users", id));
    }

    @Override
    public Optional<User> findById(long id) {
        return data.stream()
                .filter(item -> item.getId().equals(id)) // 현재 User 객체의 id가 찾고자 하는 id와 같은지 비교.
                .findAny(); // 조건에 맞는 요소 중 하나를 찾아 Optional<User>로 반환. 결과가 없으면 Optional.empty()를 반환.
    }

    @Override
    public Optional<User> findByIdAndStatus(long id, UserStatus userStatus) {
        return data.stream()
                .filter(item -> item.getId().equals(id) && item.getStatus() == userStatus)
                .findAny();
    }

    @Override
    public Optional<User> findByEmailAndStatus(String email, UserStatus userStatus) {
        return data.stream()
                .filter(item -> item.getEmail().equals(email) && item.getStatus() == userStatus)
                .findAny();
    }

    @Override
    public User save(User user) {
        if (user.getId() == null || user.getId() == 0) { //유저의 id가 0이거나 null일때
            User newUser = User.builder()// 새로운 유저로 판단합니다.
                    .id(autoGeneratedId.incrementAndGet())
                    .email(user.getEmail())
                    .nickname(user.getNickname())
                    .address(user.getAddress())
                    .certificationCode(user.getCertificationCode())
                    .status(user.getStatus())
                    .lastLoginAt(user.getLastLoginAt())
                    .build();
            data.add(newUser);
            return newUser;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), user.getId()));
            data.add(user);
            return user;
        }
    }
}
